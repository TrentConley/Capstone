/*
 * 
 */
package simulation;
import java.math.*;
//I don't need this class

//This class will store everything related to lines, and manipulations. 
public class Vector 
{
	/*
	 * I'm going to redesign this class. The following lines will help me think through this. 
	 * you need to keep the magnitude the same when it is generated by RNG
	 * If you assign a random varable to x, then i'm affraid that y will be affected so that
	 * there will be a skewed distribution
	 * however, if you keep the theta as an intermediary step, then you eliminate the risk of 
	 * potential skewing. All I would have to calculate is the acutal conversion from the theta
	 * to the vector coefficients. I dont think that will be too hard. However, applying that method
	 * to three dimentions is quite hard. However, I could simply add another RNG for the x-z plane
	 * and that should solve the problem. I think that is how I will impliment this class. 
	 * 
	 * 
	 * 
	 * 
	 */
	
	
	
	
	
	
	
	
	
	
	
	
	private double magnitude; //the magnitude will be quite large beccause it will be in terms of the 
	private double theta;
	
	public Vector (double magnitudeIn, double thetaIn)
	{
		magnitude = magnitudeIn;
		theta = thetaIn;
	}
	
	
	public double getXvel()
	{
		return Math.cos(theta) * magnitude;
	}
	
	/*
	 * gets the y velocity component of the atom
	 */
	public double get_yvel()
	{
		return Math.sin(theta) * magnitude;
	}
	
	
	
	public double getMagnitude()
	{
		return this.magnitude;
	}
	
	public double getTheta() 
	{
		return this.theta;
	}
	
	public void setMagnitude(double magnitudeIn)
	{
		this.magnitude = magnitudeIn;
	}
	
	public void setTheta(double thetaIn)
	{
		this.theta = thetaIn;
	}
	
	public String toString()
	{
		return "magnitude is " + Double.toString(magnitude) + " theta is " + Double.toString(theta);
	}
}